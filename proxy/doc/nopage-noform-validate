{"id":1016900,"slug":"validate","title":"校验","book_id":187346,"book":{"id":187346,"type":"Book","slug":"noform","name":"NoForm","user_id":222786,"description":"NoForm - 让天下没有难做的表单","creator_id":110109,"public":1,"items_count":33,"likes_count":0,"watches_count":4,"content_updated_at":"2019-01-07T03:29:29.431Z","updated_at":"2019-01-07T03:29:29.000Z","created_at":"2018-12-11T00:41:54.000Z","namespace":"nopage/noform","user":{"id":222786,"type":"Group","login":"nopage","name":"NoPage","description":"NoPage - 让天下没有难做的CRUD","avatar_url":"https://gw.alipayobjects.com/zos/rmsportal/SZXCSCJTuhRSmAggBlVp.png","large_avatar_url":"https://gw.alipayobjects.com/zos/rmsportal/SZXCSCJTuhRSmAggBlVp.png?x-oss-process=image/resize,m_fill,w_320,h_320","medium_avatar_url":"https://gw.alipayobjects.com/zos/rmsportal/SZXCSCJTuhRSmAggBlVp.png?x-oss-process=image/resize,m_fill,w_160,h_160","small_avatar_url":"https://gw.alipayobjects.com/zos/rmsportal/SZXCSCJTuhRSmAggBlVp.png?x-oss-process=image/resize,m_fill,w_80,h_80","books_count":5,"public_books_count":4,"followers_count":0,"following_count":0,"created_at":"2018-12-11T00:38:10.000Z","updated_at":"2018-12-11T08:20:27.000Z","_serializer":"v2.user"},"_serializer":"v2.book"},"user_id":110109,"creator":{"id":110109,"type":"User","login":"guishu","name":"鬼鼠","description":null,"avatar_url":"https://cdn.yuque.com/yuque/0/2018/png/110109/1527234002873-avatar/2ccdab19-b7e2-42d6-b097-f42de766f94c.png","large_avatar_url":"https://cdn.yuque.com/yuque/0/2018/png/110109/1527234002873-avatar/2ccdab19-b7e2-42d6-b097-f42de766f94c.png?x-oss-process=image/resize,m_fill,w_320,h_320","medium_avatar_url":"https://cdn.yuque.com/yuque/0/2018/png/110109/1527234002873-avatar/2ccdab19-b7e2-42d6-b097-f42de766f94c.png?x-oss-process=image/resize,m_fill,w_160,h_160","small_avatar_url":"https://cdn.yuque.com/yuque/0/2018/png/110109/1527234002873-avatar/2ccdab19-b7e2-42d6-b097-f42de766f94c.png?x-oss-process=image/resize,m_fill,w_80,h_80","books_count":4,"public_books_count":2,"followers_count":0,"following_count":0,"created_at":"2018-04-24T06:58:34.000Z","updated_at":"2019-01-02T09:12:32.000Z","_serializer":"v2.user"},"format":"asl","body":"","body_draft":"","body_html":"<h1 id=\"24rmxp\" data-type=\"h\"><a class=\"anchor\" id=\"校验\" href=\"#24rmxp\"></a>校验</h1><div data-type=\"p\"></div><div data-type=\"p\">NoForm使用<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/yiminghe/async-validator\" class=\"bi-link\">async-validator</a>作为校验器， 所有的校验相关的API和规则与该校验器一致。</div><div data-type=\"p\"></div><div data-type=\"p\">NoForm集成了校验器后，在表单中启用校验是非常方便的，下面一步步来介绍。</div><div data-type=\"p\"></div><div data-type=\"p\"></div><h1 id=\"9okgrf\" data-type=\"h\"><a class=\"anchor\" id=\"按需校验demo\" href=\"#9okgrf\"></a>按需校验DEMO</h1><div data-type=\"p\"></div><div data-type=\"p\"><div id=\"nwupbo\" data-type=\"image\" data-display=\"block\" data-align=\"left\" data-src=\"https://cdn.nlark.com/yuque/0/2018/gif/110109/1544089657361-a67d7801-765f-4002-b1f7-7a00d46c6d81.gif\" data-width=\"609\"><img src=\"https://cdn.nlark.com/yuque/0/2018/gif/110109/1544089657361-a67d7801-765f-4002-b1f7-7a00d46c6d81.gif\" width=\"609\"/></div></div><div data-type=\"p\"></div><div data-type=\"p\"></div><h1 id=\"mcossl\" data-type=\"h\"><a class=\"anchor\" id=\"定义校验规则\" href=\"#mcossl\"></a>定义校验规则</h1><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">const validateConfig = {\n    username: {type: &quot;string&quot;, required: true},\n    age: [\n        {type: &quot;number&quot;, required: true, transform(value) {\n            return parseInt(value, 10)\n        }},\n        {validator(rule, value, callback, source, options) {\n            if(value &lt; 18){\n                callback([&#x27;too young&#x27;]);\n            }\n            callback([])\n        }}\n    ],\n    gender: {type: &quot;string&quot;, required: true, min: &#x27;1&#x27;}\n}\n\n</code></pre><div data-type=\"p\"></div><blockquote><div data-type=\"p\">validateConfig完全与async-validator一致，更多的校验规则请参考<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/yiminghe/async-validator\" class=\"bi-link\">async-validator</a></div></blockquote><div data-type=\"p\"></div><h1 id=\"7l48nb\" data-type=\"h\"><a class=\"anchor\" id=\"启用校验\" href=\"#7l48nb\"></a>启用校验</h1><div data-type=\"p\">\n启用校验同样有两种方式，基于核心或JSX属性，推荐核心的形式。</div><div data-type=\"p\"></div><h3 id=\"xw0xea\" data-type=\"h\"><a class=\"anchor\" id=\"span,[object-object],核心形式,code,[object-object],(推荐)\" href=\"#xw0xea\"></a>核心形式<code>(推荐)</code></h3><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">class Demo extends React.Component {\n    componentWillMount = () =&gt; { // Initialized\n        this.core = new FormCore({ validateConfig }); // enable validate by config\n    }\n    render() {\n        return &lt;Form core={this.core}&gt;\n            &lt;FormItem name=&quot;username&quot;&gt;&lt;Input /&gt;&lt;/FormItem&gt;\n        &lt;/Form&gt;\n    }\n}\n</code></pre><div data-type=\"p\"></div><h3 id=\"wa14bw\" data-type=\"h\"><a class=\"anchor\" id=\"通过jsx属性\" href=\"#wa14bw\"></a>通过JSX属性</h3><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">class Demo extends React.Component {\n    mountCore = (core) =&gt; { this.core = core }\n    render() { // pass validateConfig as jsx props\n        return &lt;Form onMount={this.mountCore} validateConfig={validateConfig} &gt;\n            &lt;FormItem name=&quot;username&quot;&gt;&lt;Input /&gt;&lt;/FormItem&gt;\n        &lt;/Form&gt;\n    }\n}\n</code></pre><div data-type=\"p\"></div><h1 id=\"fqppoo\" data-type=\"h\"><a class=\"anchor\" id=\"触发校验\" href=\"#fqppoo\"></a>触发校验</h1><div data-type=\"p\"></div><div data-type=\"p\"><span data-type=\"color\" style=\"color:rgb(88, 88, 88)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">注意：执行validate方法如果有错误会显示在FormItem底部，如果只希望得到错误而不触发错误渲染，请使用</span></span><code>validateWithoutRender</code></div><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">const errors = await this.core.validate(); // cause error render\nconst cleanErrors = await this.core.validateWithoutRender(); // just return error result\n</code></pre><div data-type=\"p\"></div><div data-type=\"p\"></div><h1 id=\"058fhh\" data-type=\"h\"><a class=\"anchor\" id=\"span,[object-object],按需校验,code,[object-object],（推荐）\" href=\"#058fhh\"></a>按需校验<code>（推荐）</code></h1><div data-type=\"p\"></div><div data-type=\"p\"><span data-type=\"color\" style=\"color:rgb(88, 88, 88)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">有两种方式执行按需校验，一种直接在构建函数中传入</span></span><code>autoValidate</code><span data-type=\"color\" style=\"color:rgb(88, 88, 88)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\"> </span></span>为 <code>true</code><span data-type=\"color\" style=\"color:rgb(88, 88, 88)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">, 另一种执行在</span></span><span data-type=\"color\" style=\"color:rgb(88, 88, 88)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\"><code>onchange</code></span></span><span data-type=\"color\" style=\"color:rgb(88, 88, 88)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">中执行validateItem。</span></span></div><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">// 1st\nthis.core = new FormCore({\n    validateConfig,\n    autoValidate: true\n});\n\n\n// 2nd\nthis.core = new FormCore({ validateConfig });\nthis.core.onChange = (fireKeys, values, context) =&gt; {\n    context.validateItem(fireKeys);\n}\n</code></pre><div data-type=\"p\"></div><h1 id=\"1ynwgb\" data-type=\"h\"><a class=\"anchor\" id=\"-自动滚动到错误位置\" href=\"#1ynwgb\"></a> 自动滚动到错误位置</h1><div data-type=\"p\">\n当发生错误时，聚焦到某个field是非常常见的功能。目前会自动滚动到第一个错误的位置。</div><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">core.scrollToError();\n</code></pre><div data-type=\"p\"></div><div data-type=\"p\">NoForm会根据校验结果, 自动为 <code>命中/未命中</code> 的表单元素 <code>显示/清理</code> 错误信息。</div><div data-type=\"p\"></div><h1 id=\"8crolb\" data-type=\"h\"><a class=\"anchor\" id=\"进阶\" href=\"#8crolb\"></a>进阶</h1><div data-type=\"p\"></div><h3 id=\"lky6qd\" data-type=\"h\"><a class=\"anchor\" id=\"span,[object-object],动态校验,code,[object-object],(推荐)\" href=\"#lky6qd\"></a>动态校验<code>(推荐)</code></h3><div data-type=\"p\"></div><div data-type=\"p\">通过方法来定义动态校验规则</div><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">const validateConfig = {\n    username: {type: &quot;string&quot;, required: true},\n    age: (values, context) =&gt; { // dynamic validate config\n        const { username } = values;\n        return {type: &quot;string&quot;, required: !!username };\n    }\n}\n</code></pre><div data-type=\"p\"></div><h3 id=\"f859sp\" data-type=\"h\"><a class=\"anchor\" id=\"动态校验（备选方案)\" href=\"#f859sp\"></a>动态校验（备选方案)</h3><div data-type=\"p\"></div><div data-type=\"p\">目前可以通过在FormItem上编写validateConfig来设定动态规则</div><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">const dynamicValidateConfig = (config, formCore) =&gt; { // null means disabled validate    \n    return (formCore.getValue(&#x27;username&#x27;) === &#x27;bobby&#x27;) ? null : { type: &#x27;string&#x27;, required: true };\n};\n\nconst dynamicProps = (props, formCore) =&gt; { // change required props dynamically    \n    return { required: (formCore.getValue(&#x27;username&#x27;) === &#x27;bobby&#x27;) };    \n};\n\n&lt;FormItem label=&quot;age&quot; name=&quot;age&quot; validateConfig={dynamicValidateConfig} props={dynamicProps}&gt;\n    &lt;Input /&gt;\n&lt;/FormItem&gt;\n</code></pre><div data-type=\"p\"></div><h3 id=\"qvxgyh\" data-type=\"h\"><a class=\"anchor\" id=\"子项校验\" href=\"#qvxgyh\"></a>子项校验</h3><div data-type=\"p\"></div><div data-type=\"p\">NoForm支持自定义组件(value/onChange受控规范) 并且通常当做简单组件input/select去校验它们。 但是很多时候我们会写一些非常复杂的组件，这些组件内部也会进行校验，NoForm提供一套子项校验的标准让你方便去接入。</div><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">class ComplexComponent extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        const { item } = context;\n        if (item &amp;&amp; item.core) { // bind item core\n            item.core.addSubField({\n                validate: this.validate // item core will execute validate\n            });\n        }\n    }\n\n    async validate = () =&gt; {\n        const error = await somemethod();\n        return error;\n    }\n}\n</code></pre><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">&lt;Form&gt;\n    &lt;FormItem label=&quot;complex&quot; name=&quot;complex&quot;&gt;\n        &lt;ComplexComponent /&gt;\n    &lt;/FormItem&gt;\n&lt;/Form&gt;\n</code></pre><div data-type=\"p\"></div><h3 id=\"ggt6na\" data-type=\"h\"><a class=\"anchor\" id=\"自定义错误信息\" href=\"#ggt6na\"></a>自定义错误信息</h3><div data-type=\"p\"></div><div data-type=\"p\">你可以自定义错误信息的渲染，尤其是在使用了子项校验的时候</div><div data-type=\"p\"></div><pre data-syntax=\"jsx\"><code class=\"language-jsx\">errorRender = (errMsg, error) =&gt; {\n    const { main, sub } = error; // sub-item validate\n    return sub ? &lt;span style={{ color: &#x27;blue&#x27; }}&gt;{sub}&lt;/span&gt; : null;\n}\n\nrender() {\n    return &lt;FormItem errorRender={this.errorRender} /&gt;\n}\n</code></pre><div data-type=\"p\"></div>","public":1,"status":null,"likes_count":0,"comments_count":0,"content_updated_at":"2018-12-08T09:00:34.000Z","deleted_at":null,"created_at":"2018-11-30T17:00:07.000Z","updated_at":"2018-12-11T00:42:43.000Z","published_at":"2018-12-08T09:00:34.000Z","first_published_at":null,"word_count":858,"cover":null,"description":"校验NoForm使用async-validator作为校验器， 所有的校验相关的API和规则与该校验器一致。NoForm集成了校验器后，在表单中启用校验是非常方便的，下面一步步来介绍。按需校验DEMO定义校验规则const validateConfig = {     username: {t...","custom_description":null,"_serializer":"v2.doc_detail"}